#! /usr/bin/python3.3

import postgresql
import sys


RR = {(1, 6) : '1d6', (2, 7) : '1d6+1', (3,8) : '1d6+2', (4,9) : '1d6+3', (5,10) : '1d6+4', (1,10) : '1d10'}

def max_length(roll_string):
	roll_string = "".join(roll_string.split())
	rolls = roll_string.split("+")
	total = 0
	for roll in rolls:
		n, x = map(int, roll.split("d"))
		total += n*x
	return len(str(total)) 

try:
	con = postgresql.open(database = "numenera", user = "jake", password = "t1o2b3y4")
	get_table   = con.prepare("SELECT roll, name FROM tables WHERE id = $1")
	get_cyphers = con.prepare("SELECT * FROM numenera_item, cypher WHERE numenera_item.name ILIKE $1 AND " 
			+ "numenera_item.n_id = cypher.cyp_id ORDER BY name ASC")
	get_forms   = con.prepare("SELECT forms.form, forms.type FROM cypher_forms, forms WHERE "
			+ "cypher_forms.cyp_id = $1 AND forms.form_id = cypher_forms.form_id")
	get_effects = con.prepare("SELECT * FROM effects_table WHERE table_id = $1 ORDER BY low_roll ASC")
	
	#Ensures that a search term has been entered
	if len(sys.argv) < 2:
		print("No search term given")
		exit()
	
	#Pulls all cyphers out of the list matching the given search anywhere in the cypher's name (case insensitive)
	cyphers = get_cyphers("%" + sys.argv[1] + "%")
	
	#Prints an error message if no cyphers could be found matching the search term
	if len(cyphers) == 0:
		print("No Cyphers found")
		exit()

	#Displays and labels each cypher with a numeric value starting at 0
	c = 0
	for cypher in cyphers:
		print("{}: {}".format(c, cypher[1]))
		c += 1
	
	print()

	#Read in the users choice of cypher by index, accepting mistakes in typing
	while True:
		try:
			i = int(input("Please input the cypher index: "))
			break
		except ValueError:
			pass

	#Datapoints represented by cypher:
        #       [n_id, name, min_level, max_level, description, table_name, n_id/cyp_id, type]
	cypher = cyphers[i]
	print()

	lvl = RR.get((cypher[2], cypher[3]), cypher[2])

	#Gets a list of all possible forms of the cypher
	forms = get_forms(cypher[0])
	
	#Start of the output
	print("{0}Name:{1} {2}\n{0}Level:{1} {3}\n{0}Effect:{1}\n\t{4}\n{0}Type:{1} {5}"
		.format("\033[1m", "\033[0m", cypher[1], lvl, cypher[4], cypher[7]))
	
	#Displays the possible forms
	print("\033[1mForms:\033[0m")
	if forms == []:
		print("\tN/A")
	else:
		t = []
		for form in forms:
			if form[1] not in t:
				print("\t\033[4m{}\033[0m".format(form[1]))
				t.append(form[1])
			print("\t\t" + form[0])
	

	#Displays the effects table associated if one exits
	if cypher[5] != None:
		roll, name = get_table(cypher[5])[0]
		L = str(max_length(roll))
		tbl = get_effects(cypher[5])
		print("\033[1mTable of Effects:\033[0m " + name + " (Roll " + roll + ")")
		for e in tbl:
			print(str("\t\033[4m{:0"+L+"}-{:0"+L+"}:\033[0m\n\t\t{}").format(e[1], e[2], e[3]))

except Exception as e:
	print(e)

finally:
	if con:
		con.close()
