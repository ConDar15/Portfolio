#!/usr/bin/python3.3

import sys, os
import postgresql
import random
from helper_functions import roll

error = False
try:
	#Setting up database connections and prepared statements
	con = postgresql.open(database="numenera",user="jake",password="t1o2b3y4")
	cyphers     = con.prepare("SELECT * FROM cypher")()
	get_item    = con.prepare("SELECT * FROM numenera_item WHERE n_id = $1")
	get_effects = con.prepare("SELECT * FROM effects_table WHERE table_id = $1 ORDER BY low_roll ASC")
	get_forms   = con.prepare("SELECT f.form, f.type FROM forms as f, cypher_forms as c WHERE c.cyp_id = $1 and c.form_id = f.form_id")
	get_table   = con.prepare("SELECT name, roll FROM tables WHERE id = $1")	

	#Ensures that the provided argument is positive
	try:
		N = max(int(sys.argv[1]), 1)
	except:
		N = 1

	if len(sys.argv) > 2:
		if sys.argv[2] == "--file-printing":
			fp = True
			bb = be = ""
		else:
			fp = False
			bb = "\033[1m"
			be = "\033[0m"
	
	for i in range(N):
		
		#Data points represented by cypher:
		#	[n_id/cyp_id, type]
		cypher = random.choice(cyphers)

		#Data points represented by item:
		#	[n_id, name, min_level, max_level, effect, table_id]
		item   = get_item(cypher[0])[0]
		
		#Gets a random table entry if the item has an associated table
		if item[5] != None:
			y, x = get_table(item[5])[0] #y holds the table name but is not used here
			x    = roll(x)
			t    = get_effects(item[5])
			for e in t:
				if x in range(e[1], e[2]+1):
					ef = e[3]
					break
		else:
			ef = "N/A"
		
		#Chooses a random form if any exist
		forms = get_forms(item[0])
		if forms != []:
			form = random.choice(forms)
			form = form[0] + ' ' + '[{}]'.format(form[1])
		else:
			form = "N/A"
		
		#Generates a random level for the item in it's level range 
		lv = random.randint(item[2], item[3])
		
		#Prints the data in a nice format
		#\033[1m and \033[0m are start and end bold text respectively
		print("{0}Name:{1} {2}\n{0}Level:{1} {3}\n{0}Effect:{1}\n\t{4}\n{0}Type:{1} {5}\n{0}Form:{1} {6}"
			.format(bb, be, item[1], lv, item[4], cypher[1], form, ef))
		if item[5] != None:
			print("{0}Table Effect:{1}\n\t{2}"
				.format(bb, be, ef))
		
		if fp:
			print("")
		else:
			input()


except Exception as e:
	exc_type, exc_obj, exc_tb = sys.exc_info()
	fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
	print(exc_type, fname, exc_tb.tb_lineno)
	print(item)
	exit()

finally:
	if con:
		con.close()

if not fp:
	input("Complete")
