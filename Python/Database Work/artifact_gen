#!/usr/bin/python3.3

import sys, os
import postgresql
import random
from helper_functions import roll

try:
	#Set up database connection and prepare statements used for data retreival
	con = postgresql.open(database="numenera",user="jake",password="t1o2b3y4")
	artifacts   = con.prepare("SELECT * FROM artifact")()
	get_item    = con.prepare("SELECT * FROM numenera_item WHERE n_id = $1")
	get_effects = con.prepare("SELECT * FROM effects_table WHERE table_id = $1 ORDER BY low_roll ASC")
	get_roll    = con.prepare("SELECT roll FROM tables WHERE id = $1")

	#Ensures that the provided argument is positive
	try:
		N = max(int(sys.argv[1]), 1)
	except:
		N = 1

	if len(sys.argv) > 2:
		if sys.argv[2] == "--file-printing":
			fp = True
			bb = be = ""
		else:
			fp = False
			bb = "\033[1m"
			be = "\033[0m"


	for i in range(N):
		
		#Data points represented by artifact:
		#	[n_id/art_id, form, depletion_roll, depletion_threshold, notes]
		artifact = random.choice(artifacts)

		#Data points represented by item:
		#	[n_id, name, min_level, max_level, description, table_name]
		item = get_item(artifact[0])[0]
		
		#Gets a random table entry if the item has an associated table
		if item[5] != None:
			x = roll(get_roll(item[5])[0][0])
			t = get_effects(item[5])
			for e in t:
				if x in range(e[1],e[2] + 1):
					ef = e[1]
					break
		else:
			ef = "N/A"
		
		#Sets the artifact depletion appropriately
		if artifact[2] == None:
			dep = "N/A"
		elif artifact[2] == artifact[3]:
			dep = "Automatic"
		elif artifact[3] == 1:
			dep = "1 in 1d{}".format(artifact[2])
		else:
			dep = "1-{} in 1d{}".format(artifact[3], artifact[2])

		#Generates a random level for the item in it's level range
		lv = random.randint(item[2], item[3] + 1)
		
		#Adds notes if there are any
		notes = artifact[4] == None and "N/A" or artifact[4]
		
		#Prints the data in a nice format 
		#\033[1m and \033[0m are start and end of bold text respectively
		print(("{0}Name:{1} {2}\n{0}Level:{1} {3}\n{0}Effect:{1}\n\t{4}\n{0}Form:{1} {5}\n" +
			"{0}Depletion:{1} {6}")
			.format(bb, be, item[1], lv, item[4], artifact[1], dep))
		
		if item[5] != None:
			print("{0}Table Effect:{1}\n\t{2}"
				.format(bb, be, ef))

		if notes != "N/A":
			print("{0}Notes:{1}\n\t{2}"
				.format(bb, be, notes))

		if fp:
			print("")
		else:
			input()

except:
	exc_type, exc_obj, exc_tb = sys.exc_info()
	fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
	print(exc_type, fname, exc_tb.tb_lineno)
	print(item)
	exit()
	
finally:
	if con:
		con.close()

if not fp:
	input("Completed")
